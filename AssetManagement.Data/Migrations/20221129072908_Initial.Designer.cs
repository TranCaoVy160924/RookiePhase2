// <auto-generated />
using System;
using AssetManagement.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetManagement.Data.Migrations
{
    [DbContext(typeof(AssetManagementDbContext))]
    [Migration("20221129072908_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AssetManagement.Domain.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "bb69e31f-237f-4502-8db6-aeba009cd0fc",
                            Description = "Administrator role",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("12147fe0-4571-4ad2-b8f7-d2c863eb78a5"),
                            ConcurrencyStamp = "ecf600aa-1ffb-4ed4-a318-2a3614d98a56",
                            Description = "Staff role",
                            Name = "Staff",
                            NormalizedName = "staff"
                        });
                });

            modelBuilder.Entity("AssetManagement.Domain.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoginFirstTime")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77061d73-3294-4097-9c63-77b0876534d2",
                            CreatedDate = new DateTime(2022, 11, 29, 14, 29, 8, 679, DateTimeKind.Local).AddTicks(2205),
                            Dob = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "adminhcm@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Toan",
                            Gender = 0,
                            IsDeleted = false,
                            IsLoginFirstTime = false,
                            LastName = "Bach",
                            Location = 0,
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "adminhcm@gmail.com",
                            NormalizedUserName = "adminhcm",
                            PasswordHash = "AQAAAAEAACcQAAAAECHytNYcFIsR//sfscR5OLY1kzln0zSwOFoxuXCrZ786AQXrl0TSOHuFR/VOQQXQqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            StaffCode = " SD0001",
                            TwoFactorEnabled = false,
                            UserName = "adminhcm"
                        },
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00bf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7299983-1e7e-4147-9428-f2c5abf0f6f9",
                            CreatedDate = new DateTime(2022, 11, 29, 14, 29, 8, 685, DateTimeKind.Local).AddTicks(4185),
                            Dob = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "adminhn@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Toan",
                            Gender = 0,
                            IsDeleted = false,
                            IsLoginFirstTime = true,
                            LastName = "Bach",
                            Location = 1,
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "adminhn@gmail.com",
                            NormalizedUserName = "adminhn",
                            PasswordHash = "AQAAAAEAACcQAAAAEIEwNRgdYOLeT/+evslU/ll4lnIcNxcixli63RZnik51cktMxU88jS0Jmrhihj3O3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            StaffCode = " SD0002",
                            TwoFactorEnabled = false,
                            UserName = "adminhn"
                        },
                        new
                        {
                            Id = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "066ebe40-2a94-4126-a66f-e3928f2aca9d",
                            CreatedDate = new DateTime(2022, 11, 29, 14, 29, 8, 691, DateTimeKind.Local).AddTicks(5702),
                            Dob = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Toan",
                            Gender = 1,
                            IsDeleted = false,
                            IsLoginFirstTime = true,
                            LastName = "Bach",
                            Location = 1,
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "staff@gmail.com",
                            NormalizedUserName = "staff1",
                            PasswordHash = "AQAAAAEAACcQAAAAEK2woAJ9Ut7H2JpMb3jMr+ezwam2DZJ25D40PpzaaNdBUHPxvuYNwBqB4sItLTJDkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            StaffCode = " SD0003",
                            TwoFactorEnabled = false,
                            UserName = "staff1"
                        },
                        new
                        {
                            Id = new Guid("70bd814f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aec1d194-2023-41fe-979b-8fce9154ec12",
                            CreatedDate = new DateTime(2022, 11, 29, 14, 29, 8, 697, DateTimeKind.Local).AddTicks(7258),
                            Dob = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Toan",
                            Gender = 1,
                            IsDeleted = false,
                            IsLoginFirstTime = true,
                            LastName = "Bach",
                            Location = 1,
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "staff@gmail.com",
                            NormalizedUserName = "staff2",
                            PasswordHash = "AQAAAAEAACcQAAAAEN2BkjsVyaBZNvLbo8rl48N2dz3NRCoEnrLy2bu4I7eFYU7saEopHhRJ2QMPUIvH0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            StaffCode = " SD0004",
                            TwoFactorEnabled = false,
                            UserName = "staff2"
                        },
                        new
                        {
                            Id = new Guid("73bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "792ce414-7ddf-4776-8637-0ad164b83799",
                            CreatedDate = new DateTime(2022, 11, 29, 14, 29, 8, 703, DateTimeKind.Local).AddTicks(8919),
                            Dob = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staffdis@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Toan",
                            Gender = 1,
                            IsDeleted = true,
                            IsLoginFirstTime = true,
                            LastName = "Bach",
                            Location = 1,
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "staffdis@gmail.com",
                            NormalizedUserName = "staffdis",
                            PasswordHash = "AQAAAAEAACcQAAAAEJpPxmwjE+37+Km/msxNhMuhIB8u24sK5xjPiPvfWMEAVVqaH4g/Mx9SYEymdy2reA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            StaffCode = " SD0005",
                            TwoFactorEnabled = false,
                            UserName = "staffDis"
                        });
                });

            modelBuilder.Entity("AssetManagement.Domain.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssetCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InstalledDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssetCode = "LA100001",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2022, 11, 29, 14, 29, 8, 703, DateTimeKind.Local).AddTicks(9195),
                            IsDeleted = false,
                            Location = 0,
                            Name = "Laptop 1",
                            Specification = "Core i1, 1GB RAM, 150 GB HDD, Window 1",
                            State = 1
                        },
                        new
                        {
                            Id = 2,
                            AssetCode = "LA100002",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2022, 11, 29, 14, 29, 8, 703, DateTimeKind.Local).AddTicks(9209),
                            IsDeleted = true,
                            Location = 0,
                            Name = "Laptop 2",
                            Specification = "Core i2, 2GB RAM, 250 GB HDD, Window 2",
                            State = 0
                        },
                        new
                        {
                            Id = 3,
                            AssetCode = "LA100003",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2022, 11, 29, 14, 29, 8, 703, DateTimeKind.Local).AddTicks(9217),
                            IsDeleted = false,
                            Location = 0,
                            Name = "Laptop 3",
                            Specification = "Core i3, 3GB RAM, 350 GB HDD, Window 3",
                            State = 1
                        },
                        new
                        {
                            Id = 4,
                            AssetCode = "LA100004",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2022, 11, 29, 14, 29, 8, 703, DateTimeKind.Local).AddTicks(9336),
                            IsDeleted = true,
                            Location = 0,
                            Name = "Laptop 4",
                            Specification = "Core i4, 4GB RAM, 450 GB HDD, Window 4",
                            State = 0
                        },
                        new
                        {
                            Id = 5,
                            AssetCode = "LA100005",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2022, 11, 29, 14, 29, 8, 703, DateTimeKind.Local).AddTicks(9348),
                            IsDeleted = false,
                            Location = 0,
                            Name = "Laptop 5",
                            Specification = "Core i5, 5GB RAM, 550 GB HDD, Window 5",
                            State = 1
                        },
                        new
                        {
                            Id = 6,
                            AssetCode = "LA100006",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2022, 11, 29, 14, 29, 8, 703, DateTimeKind.Local).AddTicks(9358),
                            IsDeleted = true,
                            Location = 0,
                            Name = "Laptop 6",
                            Specification = "Core i6, 6GB RAM, 650 GB HDD, Window 6",
                            State = 0
                        },
                        new
                        {
                            Id = 7,
                            AssetCode = "LA100007",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2022, 11, 29, 14, 29, 8, 703, DateTimeKind.Local).AddTicks(9366),
                            IsDeleted = false,
                            Location = 0,
                            Name = "Laptop 7",
                            Specification = "Core i7, 7GB RAM, 750 GB HDD, Window 7",
                            State = 1
                        },
                        new
                        {
                            Id = 8,
                            AssetCode = "LA100008",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2022, 11, 29, 14, 29, 8, 703, DateTimeKind.Local).AddTicks(9374),
                            IsDeleted = true,
                            Location = 0,
                            Name = "Laptop 8",
                            Specification = "Core i8, 8GB RAM, 850 GB HDD, Window 8",
                            State = 0
                        },
                        new
                        {
                            Id = 9,
                            AssetCode = "LA100009",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2022, 11, 29, 14, 29, 8, 703, DateTimeKind.Local).AddTicks(9382),
                            IsDeleted = false,
                            Location = 0,
                            Name = "Laptop 9",
                            Specification = "Core i9, 9GB RAM, 950 GB HDD, Window 9",
                            State = 1
                        },
                        new
                        {
                            Id = 10,
                            AssetCode = "LA1000010",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2022, 11, 29, 14, 29, 8, 703, DateTimeKind.Local).AddTicks(9393),
                            IsDeleted = true,
                            Location = 0,
                            Name = "Laptop 10",
                            Specification = "Core i10, 10GB RAM, 1050 GB HDD, Window 10",
                            State = 0
                        });
                });

            modelBuilder.Entity("AssetManagement.Domain.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("AssignedTo");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AssignedDate = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            AssignedTo = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            IsDeleted = false,
                            Note = "Note for assignment 1",
                            ReturnedDate = new DateTime(2022, 11, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            State = 1
                        },
                        new
                        {
                            Id = 2,
                            AssignedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AssignedDate = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            AssignedTo = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            IsDeleted = false,
                            Note = "Note for assignment 2",
                            ReturnedDate = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            State = 0
                        },
                        new
                        {
                            Id = 3,
                            AssignedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AssignedDate = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            AssignedTo = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            IsDeleted = false,
                            Note = "Note for assignment 3",
                            ReturnedDate = new DateTime(2022, 12, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            State = 1
                        },
                        new
                        {
                            Id = 4,
                            AssignedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AssignedDate = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            AssignedTo = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            IsDeleted = false,
                            Note = "Note for assignment 4",
                            ReturnedDate = new DateTime(2022, 12, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            State = 0
                        },
                        new
                        {
                            Id = 5,
                            AssignedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AssignedDate = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            AssignedTo = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            IsDeleted = false,
                            Note = "Note for assignment 5",
                            ReturnedDate = new DateTime(2022, 12, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            State = 1
                        },
                        new
                        {
                            Id = 6,
                            AssignedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AssignedDate = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            AssignedTo = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            IsDeleted = false,
                            Note = "Note for assignment 6",
                            ReturnedDate = new DateTime(2022, 12, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            State = 0
                        },
                        new
                        {
                            Id = 7,
                            AssignedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AssignedDate = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            AssignedTo = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            IsDeleted = false,
                            Note = "Note for assignment 7",
                            ReturnedDate = new DateTime(2022, 12, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            State = 1
                        },
                        new
                        {
                            Id = 8,
                            AssignedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AssignedDate = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            AssignedTo = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            IsDeleted = false,
                            Note = "Note for assignment 8",
                            ReturnedDate = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            State = 0
                        },
                        new
                        {
                            Id = 9,
                            AssignedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AssignedDate = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            AssignedTo = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            IsDeleted = false,
                            Note = "Note for assignment 9",
                            ReturnedDate = new DateTime(2022, 12, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            State = 1
                        },
                        new
                        {
                            Id = 10,
                            AssignedBy = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AssignedDate = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            AssignedTo = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            IsDeleted = false,
                            Note = "Note for assignment 10",
                            ReturnedDate = new DateTime(2022, 12, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            State = 0
                        });
                });

            modelBuilder.Entity("AssetManagement.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Laptop",
                            Prefix = "LA"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Monitor",
                            Prefix = "MO"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Personal Computer",
                            Prefix = "PC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00bf"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("73bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("12147fe0-4571-4ad2-b8f7-d2c863eb78a5")
                        },
                        new
                        {
                            UserId = new Guid("70bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("12147fe0-4571-4ad2-b8f7-d2c863eb78a5")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Domain.Models.Asset", b =>
                {
                    b.HasOne("AssetManagement.Domain.Models.Category", "Category")
                        .WithMany("Assets")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AssetManagement.Domain.Models.Assignment", b =>
                {
                    b.HasOne("AssetManagement.Domain.Models.Asset", "Asset")
                        .WithMany("Assignments")
                        .HasForeignKey("AssetId");

                    b.HasOne("AssetManagement.Domain.Models.AppUser", "AssignedByToAppUser")
                        .WithMany("AssignedByAssignments")
                        .HasForeignKey("AssignedBy");

                    b.HasOne("AssetManagement.Domain.Models.AppUser", "AssignedToAppUser")
                        .WithMany("AssignedToAssignments")
                        .HasForeignKey("AssignedTo");

                    b.Navigation("Asset");

                    b.Navigation("AssignedByToAppUser");

                    b.Navigation("AssignedToAppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetManagement.Domain.Models.AppUser", b =>
                {
                    b.Navigation("AssignedByAssignments");

                    b.Navigation("AssignedToAssignments");
                });

            modelBuilder.Entity("AssetManagement.Domain.Models.Asset", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("AssetManagement.Domain.Models.Category", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
